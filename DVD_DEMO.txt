////////////// In Main Function
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include "Application.h"
#include "Scenes.h"
#include "CoreAdditions.h"
#include <iostream>
Application *MainApplication;
bool switchScenes(std::string sceneName) {
    if (MainApplication != nullptr){
        return MainApplication->setCurrentScene(sceneName);
    }
    return false;
}
void DVDFactory(Scene2D& scene, sf::Vector2f location, sf::Vector2f size) {
    Resource_Manager& rm = Resource_Manager::getResourceManager();
    Entity* entity = scene.createEntity();
    entity->addComponent(RenderComponent());
    entity->addComponent(SpriteComponent());
    entity->addComponent(ScriptComponent(std::make_shared<DVDLogoBehaviour>()));

    ScriptComponent* script = entity->getComponent<ScriptComponent>();
    RenderComponent* render = entity->getComponent<RenderComponent>();
    SpriteComponent* sprite = entity->getComponent<SpriteComponent>();

    sprite->sprite.setTexture(rm.getTexture("DVD Logo"));
    sf::Vector2u textSize = sprite->sprite.getTexture()->getSize();
    sf::Vector2f newScale;
    newScale.x = size.x / (float)textSize.x;
    newScale.y = size.y / (float)textSize.y;
    sprite->sprite.setScale(newScale);
    sprite->sprite.setPosition(location);
    sprite->sprite.setOrigin(0, 0);
    DVDLogoBehaviour* behaviour = (DVDLogoBehaviour*)script->script.get();
    behaviour->spriteComponent = sprite;
    render->enabled = true;
}
int main(){
    srand(time(NULL));
    Application mainApp("PlayGround");
    MainApplication = &mainApp;
    mainApp.setWindowIcon("./cubelogo.png");
    Resource_Manager& rm = Resource_Manager::getResourceManager();
    ResourceLoadingInfo rli;
    rli.name = "Casta";
    rli.type = "texture";
    rli.URL = "./casta.png";
    rm.loadResource(rli);
    rli.name = "DVD Logo";
    rli.URL = "./dvdIcon.png";
    rm.loadResource(rli);
    Scene2D p1;
    ////////////////TESTING AREA/////////////////////
    for (int i = 0; i < 1; i++) {
        int xSize = 80;
        sf::Vector2f size(xSize, xSize/2);
        sf::Vector2f pos;
       /* pos.x = rand() / (float)RAND_MAX * ((float)WINDOW_WIDTH - size.x) + size.x;
        pos.y = rand() / (float)RAND_MAX * ((float)WINDOW_HEIGHT-size.y) + size.y;*/
        pos.x = 200;
        pos.y = 200;
        DVDFactory(p1, pos,size);
    }
    ///////////////////////////////////////////
    mainApp.addScene("Scene 2D", &p1);
    mainApp.run();
    return 0;
}
/////////////////// Systems
//////////////////////// HEADER
class DVDLogoBehaviour :public Actor {
public:
	DVDLogoBehaviour();
	void OnCreate()override;
	void OnUpdate(float deltaTime)override;
	void OnFixedUpdate(float fixedDeltaTime)override;
	void OnRender()override;
	void OnDestroy()override;
	void move(float deltaTime);
	~DVDLogoBehaviour();
	SpriteComponent* spriteComponent;
	sf::Vector2f velocity;
};
///////////////////// CPP
DVDLogoBehaviour::DVDLogoBehaviour() {
	spriteComponent = NULL;
	OnCreate();
}
void DVDLogoBehaviour::OnCreate() {
	velocity = sf::Vector2f(100,100);
	Config& config = Config::getConfig();
	}
void DVDLogoBehaviour::OnUpdate(float deltaTime) {
	Config& config = Config::getConfig();
	move(deltaTime);
}
void DVDLogoBehaviour::OnFixedUpdate(float fixedDeltaTime) {
}
void DVDLogoBehaviour::OnRender() {
}
void DVDLogoBehaviour::OnDestroy() {
}
void DVDLogoBehaviour::move(float deltaTime) {
	Config& config = Config::getConfig();
	Settings settings = config.getSettings();
	if (spriteComponent == NULL)
		return;
	sf::Vector2f position = this->spriteComponent->sprite.getPosition();
	sf::Vector2u size = this->spriteComponent->sprite.getTexture()->getSize();
	sf::Vector2f scale = this->spriteComponent->sprite.getScale();
	sf::Vector2u screenDimensions = config.getDimensions();
	bool hit = false;
	if (((position.x + ((float)size.x * scale.x) >= screenDimensions.x) && velocity.x > 0) || ((position.x <= 0) && velocity.x < 0))
	{
		std::cout << "X Upper Boundray: " << (float)position.x + ((float)size.x * scale.x) << "\t Screen Width " << screenDimensions.x << std::endl;
		hit = true;
		velocity.x *= -1;
	}
	if (((position.y + ((float)size.y * scale.y) >= screenDimensions.y) && velocity.y > 0) || ((position.y <= 0) && velocity.y < 0))
	{
		std::cout << "Y Boundray: " << (float)position.y + ((float)size.y * scale.y) << "\t Screen Height " << screenDimensions.y << std::endl;
		hit = true;
		velocity.y *= -1;
	}
	if (hit) {
		int r = rand() / (float)RAND_MAX * 255 + 1;
		int g = rand() / (float)RAND_MAX * 255 + 1;
		int b = rand() / (float)RAND_MAX * 255 + 1;
		spriteComponent->sprite.setColor(sf::Color(r, g, b));
	}
	//std::cout << "Velocity: " << velocity.x << " , " << velocity.y << std::endl;
	position = position + (velocity * deltaTime);
	this->spriteComponent->sprite.setPosition(position);
}
DVDLogoBehaviour::~DVDLogoBehaviour() {
	OnDestroy();
}
///////////////////////////////////////////////////////
